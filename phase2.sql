---------------------------------------------
--schema for proejct 1 phase 2 part 1
---------------------------------------------

DROP SCHEMA IF EXISTS schema CASCADE;
CREATE SCHEMA schema;
SET SCHEMA 'schema';

DROP TABLE IF EXISTS STUDENT CASCADE;
DROP TABLE IF EXISTS STUDENT_DIR CASCADE;
DROP TABLE IF EXISTS COURSE CASCADE;
DROP TABLE IF EXISTS COURSE_TAKEN CASCADE;

CREATE TABLE FOREST(
     forest_no INTEGER,
     name VARCHAR(30),
     area INTEGER,
     acid_level REAL,
     MBR_XMin REAL,
     MBR_XMax REAL,
     MBR_YMin REAL,
     MBR_YMax REAL,

      CONSTRAINT FOREST_PK PRIMARY KEY (forest_no)
);
--relation between STATE and WORKER
CREATE TABLE EMPLOYED(
    state REAL,
    worker VARCHAR(9),

        CONSTRAINT EMPLOYED_PK PRIMARY KEY (state,worker),
        CONSTRAINT EMPLOYED_FK1 FOREIGN KEY (worker) REFERENCES WORKER (SSN)
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT EMPLOYED_FK2 FOREIGN KEY (state) REFERENCES STATE (abbreviation)
                ON UPDATE CASCADE ON DELETE CASCADE

);

--WORK PHONE
CREATE TABLE PHONE (
    worker VARCHAR(9),
    type VARCHAR(30),
    number  VARCHAR(16),

        CONSTRAINT PHONE_PK PRIMARY KEY (type,number),
        --work phone is a MULTIVALUED attribute of WORKER
        CONSTRAINT PHONE_FK FOREIGN KEY (worker) REFERENCES WORKER(SSN)
                    ON UPDATE CASCADE ON DELETE CASCADE
);

--report is a weak entity
CREATE TABLE REPORT(
    sensor_id INTEGER,
    report_time TIMESTAMP,
    temperature REAL,
        --report_time is discriminator partial key of REPORT
         CONSTRAINT REPORT_PK PRIMARY KEY (sensor_id,report_time),
        --report is weak a entity generated by sensor
        CONSTRAINT REPORT_FK FOREIGN KEY (sensor_id) REFERENCES SENSOR(sensor_id)
                    ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE SENSOR(
    sensor_id INTEGER,
    last_charged TIMESTAMP,
    energy INTEGER,
    last_read TIMESTAMP,
    X REAL,
    Y REAL,
    maintainer_id REAL,

            CONSTRAINT SENSOR_PK PRIMARY KEY (sensor_id)
);

CREATE TABLE STATE(
    --name is the alternative key in state
    name VARCHAR(30) UNIQUE NOT NULL,
    abbreviation CHAR(2),
    area INTEGER,
    population INTEGER,
    MBR_XMin REAL,
    MBR_XMax REAL,
    MBR_YMin REAL,
    MBR_YMax REAL,

         CONSTRAINT STATE_PK PRIMARY KEY (abbreviation)
);

--
CREATE TABLE TREE_COMMON_NAME(
    genus VARCHAR(30),
    epithet VARCHAR(30),
    common_name VARCHAR(30),
         CONSTRAINT TREE_COMMON_NAME_PK PRIMARY KEY (common_name),
         --CORRECT? USE CASCADE?
         CONSTRAINT  TREE_COMMON_NAME_FK FOREIGN KEY (genus,epithet) REFERENCES TREE_SPECIES(genus,epithet)
                    ON UPDATE CASCADE ON DELETE CASCADE

);

CREATE TABLE TREE_SPECIES(
    genus VARCHAR(30),
    epithet VARCHAR(30),
    ideal_temperature REAL,
    largest_height REAL,
    raunkiaer_life_form LIFE_FORM,
    --PK: Species_name(genus,epithet)
        CONSTRAINT TREE_SPECIES_PK PRIMARY KEY (genus,epithet)
);


CREATE DOMAIN LIFE_FORM AS VARCHAR(16)
CHECK (VALUE IN ('Phanerophytes', 'Epiphytes', 'Chamaephytes', 'Hemicryptophytes', 'Cryptophytes', 'Therophytes', 'Aerophytes'))

CREATE TABLE WORKER(
    SSN VARCHAR(9),
    first VARCHAR(30),
    last VARCHAR(30),
    middle CHAR(1),
    rank REAL,

     CONSTRAINT WORKER_PK PRIMARY KEY (SSN)
);

--relation between FOREST and STATE
CREATE TABLE COVERAGE
(
    forest_no  INTEGER,
    state      CHAR(2),
    percentage REAL,
    area       INTEGER,

        CONSTRAINT COVERAGE_PK PRIMARY KEY (forest_no, state),
        CONSTRAINT COVERAGE_FK1 FOREIGN KEY (forest_no) REFERENCES FOREST (forest_no)
                ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT COVERAGE_FK1 FOREIGN KEY (state) REFERENCES STATE (abbreviation)
                ON UPDATE CASCADE ON DELETE CASCADE

);

--relation between FOREST and TREE_SPECIES
CREATE TABLE FOUND_IN (
    forest_no INTEGER,
    genus VARCHAR(30),
    epithet VARCHAR(30),

        CONSTRAINT FOUND_IN_PK PRIMARY KEY (forest_no, genus,epithet),
        CONSTRAINT FOUND_IN_FK1 FOREIGN KEY (forest_no) REFERENCES FOREST (forest_no)
                       ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT FOUND_IN_FK2 FOREIGN KEY (genus,epithet) REFERENCES TREE_SPECIES (genus,epithet)
                       ON UPDATE CASCADE ON DELETE CASCADE

);

CREATE TABLE CLOCK (
    synthetic_time TIMESTAMP
)
